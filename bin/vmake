#!/bin/sh
#
# vmake - Make multiple directories
# Written by Martin Ebourne, Started 20/08/99
#
# $Id: vmake,v 1.1 1999/08/20 12:35:12 martine Exp $

if [ $# -lt 1 -o "$1" = "-h" -o "$1" = "--help" ]
then
  echo "Usage:           `basename $0` [-k] <target> [<directores> ...]"
  echo "Purpose:         Execute make in multiple directores"
  echo "Params:"
  echo "  -k             Continue building directories even if one fails."
  echo "  <target>       The command line for make. This can be a list of targets/options"
  echo "                 as long as they are quoted as one argument."
  echo "  <directories>  List of directories to be built. If they are not listed they will"
  echo "                 be requested at run time. If you're lazy you can cut & paste a"
  echo "                 list of files and it will still work correctly."
  echo "Notes:           All parent directories up to the current directory are also made."
  echo "Example:         `basename $0` 'libs DEBUG=-g' trade/interface/cod"
  exit 1
fi

continue=0
if [ "$1" = "-k" ]
then
  continue=1
  shift
fi

target="$1"
shift

if [ "$*" = "" ]
then
  echo "Enter directories to be made followed by EOF (ctrl-D):"
  dirs=`cat`
else
  dirs="$*"
fi

makedirs=""
for i in $dirs
do
  if [ "$i" != "L" -a "$i" != "S" -a "$i" != "N" ]
  then
    cur=$i

    if [ -f $cur ]
    then
      cur=`dirname $cur`
    fi

    while [ "$cur" != "." ]
    do
      makedirs="$makedirs$cur\n"
      cur=`dirname $cur`
    done
  fi
done

failed=0
for i in `echo "$makedirs" | sort -ru`
do
  mmake -C $i $target || failed=1

  if [ "$failed" = "1" ]
  then
    echo "\n*** BUILD FAILED ***\n"

    if [ "$continue" != "1" ]
    then
      exit 1
    fi
  fi
done

if [ "$failed" = "1" ]
then
  echo "\n*** BUILD FAILED ***\n"
  exit 1
else
  echo "\n*** Build succeeded\n"
fi
