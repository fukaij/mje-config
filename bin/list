#!/bin/sh
#
# list - List locked, snapped, and new files in directories
# Written by Martin Ebourne, Started 20/08/99
#
# $Id: list,v 1.11 2000/02/07 12:00:59 martine Exp $

# Make sure we are in a version controlled directory
if [ ! -f ".VCS" ]
then
  echo "`basename $0` may only be run from within an LH tree."
  exit 1
fi

# Most .VCS files don't have snapped or locked files and are therefore all the same size. Hence
# a useful speed optimisation is to find and check only .VCS files which have a different size.
# Need to use awk to strip this .VCS file to ensure it is 'empty' for finding its size
size=`awk '
$1=="[START]", $1=="[END]" { if(substr($1,1,1)=="[" || substr($1,1,5)=="link=") print $0; next }
{ print $0 }' .VCS | wc -c`

# Search for .VCS files of unusual size, and any other files that are out of place. Remove
# /.VCS off the end so we have a list of directories with checked out files and a list of
# potentially new files
list=`find . \( -name '.VCS' ! -size ${size}c -print \
		-o -type f ! \( -name '.VCS' -o -name '.*' -o -name '*~' -o -name '*.bak' \
				-o -name '*%' -o -name '*#' -o -name '*.out' -o -name '*.log' \
				-o -name '*.vcsbak' -o -name '*.backup' \
				-o -name '*.tmp' -o -name '*.proj' \
				-o -name 'versionFile.cxx' -o -name '.newbld' \
				-o -name 'core' -o -name 'TAGS' \
			     \) -print \
		-o -type d \( -name 'sunos' -o -name 'osf1' -o -name 'Templates.DB' \
			      -o -name '.sniffdir' -o -name '.ProjectCache' \
			   \) -prune \
	     \) \
      | sed 's:/\.VCS$::'`

# Iterate over the list building a list of files to report
files=""
for item in $list
do

  # Check this item for being a directory
  if [ -d "$item" ]
  then

    # Process the .VCS file in the directory and print list of locked and snapped files,
    # including the directory path
    foundfiles=`awk '
BEGIN { FS="=" }
$1=="lock" { print "L", dir $2 }
$1=="snap" { print "S", dir $2 }
' dir=$item/ $item/.VCS`

  else

    # Might be a new file. Output just in case - will be filtered out later if not. Use 'Z' to
    # ensure it is sorted last and removed if it duplicates a checked out file
    foundfiles="Z $item"

  fi

  # Append files we've just found onto list, newline separated
  files="$files$foundfiles\n"

done

# Sort files by filename then state. uniq ignoring state to remove files listed as new which
# are actually checked out. Change Z back to N for the user and filter blank lines
echo "$files" | sort -k 2 -k 1 | uniq -s 2 | sed -e 's/^Z/N/' -e 's:\./::' -e '/^$/d'
