#eval compdef -n _parse_opts override_commands
# ZSH function file
# Set up aliases to override commands on path. This is useful for example to
# get XPG4 commands when running on a Sun box. Typically changing the path
# would break scripts
#

local good=""
local -a bad
parse_opts -- "$argv[@]" <<'EOF' || return 1
Description:
Set up aliases to override commands on path. This is useful for example to
get XPG4 commands when running on a Sun box. Typically changing the path
would break scripts

Usage:
override_commands [options] <preferred-directory> <unwanted-directory> ...

Example:
override_commands /usr/xpg4/bin /bin /usr/bin /usr/ucb/bin /usr/ccs/bin

Options:
  -h, --help			Provide this help
				# --help | -h * excludes=*

Arguments:
  <preferred-directory>		The directory commands should be run from when
				there is a clash
				# good = preferred-directory : directory
  <unwanted-directory> ...	List of directories commands should not be run
				from when the equivalent is available in the
				preferred directory
				# bad += [1,*] unwanted-directory : directory
EOF

# Check all of the executable commands in the good directory
local goodcmd=""
for goodcmd in $good/*(.xN)
do
  local cmd="${goodcmd:t}"

  # Check that the path of the REAL command is in the evil directories list
  if [[ -n ${(M)bad:#${$(whence -p $cmd):h}} ]]
  then
    case ${$(whence -wa $cmd)##*:} in
      *builtin* | *function* | *reserved* | *none*)
	# If its a built-in or function or something then don't touch
	;;
      *alias*)
	# Edit already existing aliases so we don't lose them
	alias $cmd="${$(whence $cmd)//$cmd/$goodcmd}"
	;;
      *command* | *hashed*)
	# If its a command then add a new simple alias
	alias $cmd="$goodcmd"
	;;
      *)
	# Shouldn't get here
	;;
    esac
  fi
done
