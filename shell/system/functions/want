#eval compdef -n _parse_opts want
# ZSH function file
# Halt a shell, waiting for a trigger (supplied by 'go')
#

local -A opts
parse_opts - opts -- "$argv[@]" <<'EOF' || return 1
Description:
Halt a shell, waiting for a trigger (supplied by 'go'). The semaphore will
normally be removed after it is found.

Usage:
want [options] <semaphore>

Options:
  -h, --help			Provide this help
				# --help | -h * excludes=*
  -k, --keep			Do not delete semaphore
				# --keep | -k
  -m, --missing			Succeed only when the semaphore is missing
				# --missing | -m
  -t, --test			Test only - sets return code instead of
				waiting, doesn't delete semaphore
				# --test | -t

Arguments:
  <semaphore>			Name of semaphore to wait for
				# semaphore : text
EOF

if [[ -z $semaphore_base ]]
then
  echo "ERROR: semaphore_base not defined" 1>&2
  return 1
fi

local file="$semaphore_base$opts[semaphore]"

# Invert operation if missing is requested
local invert="" missing=""
if (( opts[missing] ))
then
  invert="!"
  missing="missing "
fi

if (( opts[test] ))
then
  # Return 0 if semaphore is there (or missing if requested)
  return $(eval "[[ $invert -e \$file ]]")
else
  print -P "Waiting on ${missing}semaphore '$opts[semaphore]' at %D{%a %f %b %Y %H:%M:%S}"

  # 'go' will write the file we are watching for
  while eval "[[ $invert ! -e \$file ]]"
  do
   sleep 5
  done

  # Tidy up
  if (( !opts[keep] ))
  then
    rm -f $file
  fi

  print -P "Received ${missing}semaphore '$opts[semaphore]' at %D{%a %f %b %Y %H:%M:%S}"
fi
