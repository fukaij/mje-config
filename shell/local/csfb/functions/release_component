#eval compdef -n _parse_opts release_component
# ZSH function file
# Release component in SCM
#

local vob="/vobs/bpta"

local -a components architectures
components=($vob/^lost+found(:t))
architectures=(/vobs/release/^lost+found(:t))

local -A opts
parse_opts - opts -- "$argv[@]" <<'EOF' || return 1
Description:
Release component in SCM

Usage:
release_component [options] <component> <version> <architecture>

Options:
  -h, --help			Provide this help
				# --help | -h * excludes=*
  -m <user>, --mail=<user>	Send email to user on successful completion
				# [mail] += [*] --mail | -m : user
  -r, --re-release		Re-release a component to a new platform, or
				for which the abe failed before
				# --re-release | -r * excludes="--re-release -r --update-labels -u"
  -u, --update-labels		Re-label and release a component not fully
				released
				# --update-labels | -u * excludes="--update-labels -u --re-release -r"

Arguments:
  <component>			The name of the component to release
				# component : values=components
  <version>			The version to release. eg. 00.00.07
				# version
  <architecture>		The architecture to release for
				# arch : values=architectures
EOF

# Check version number is in the right format
if [[ $opts[version] != [0-9][0-9].[0-9][0-9].[0-9][0-9]## ]]
then
  echo "Invalid format for version. Must be of the form 00.01.02" 1>&2
  return 1
fi

echo "Re${opts[re-release]+-re}leasing component $opts[component] on $opts[arch] as version $opts[version]"


## Check for any outstanding checkouts

# Get list of current checkouts
local -a reserved
reserved=($(cleartool lscheckout -cvi -short -recurse $vob/$opts[component]))

# Confirm with user
if (( $#reserved ))
then
  echo
  echo "WARNING: The following files are checked out in this view:"
  print -l - ${reserved/#$vob\\//  }
  echo "Continue? (y/n)"
  if ! read -q
  then
    echo "Aborted."
    return 0
  fi
fi


## Check version number against component makefile

: ${(M)opts[version]:#(#b)([0-9]##).([0-9]##).([0-9]##)}
local new_major=$match[1] new_minor=$match[2] new_patch=$match[3]

# Load the component makefile in
local makefile="$vob/$opts[component]/Admin/$opts[component]_sa.mak"
zmodload -i zsh/mapfile
local text="$mapfile[$makefile]"

# Extract previous version number
: ${(M)text:#(#b)*$opts[component]_VERSION_MAJOR=([0-9]##)*}
local old_major=$match[1]
: ${(M)text:#(#b)*$opts[component]_VERSION_MINOR=([0-9]##)*}
local old_minor=$match[1]
: ${(M)text:#(#b)*$opts[component]_VERSION_PATCH=([0-9]##)*}
local old_patch=$match[1]

# Check version number given isn't older than current one
integer error=0
if (( new_major < old_major ))
then
  error=1
elif (( new_major == old_major ))
then
  if (( new_minor < old_minor ))
  then
    error=1
  elif (( new_minor == old_minor && new_patch < old_patch ))
  then
    error=1
  fi
fi

if (( error ))
then
  echo
  echo "Cannot release a version older than the previous release" 1>&2
  echo "Old version: $old_major.$old_minor.$old_patch"
  return 1
fi


## Update the component makefile to the current version

# Edit the makefile text
text=${text/$opts[component]_VERSION_MAJOR=$old_major/$opts[component]_VERSION_MAJOR=$new_major}
text=${text/$opts[component]_VERSION_MINOR=$old_minor/$opts[component]_VERSION_MINOR=$new_minor}
text=${text/$opts[component]_VERSION_PATCH=$old_patch/$opts[component]_VERSION_PATCH=$new_patch}

# Write the updated makefile out if it has changed
if [[ $mapfile[$makefile] != $text ]]
then
  echo
  echo "Updating component makefile $makefile..."

  cleartool checkout -nc $makefile || return

  mapfile[$makefile]=$text
  if [[ $mapfile[$makefile] != $text ]]
  then
    echo "Failed to write to $makefile" 1>&2
    return 1
  fi

  cleartool checkin -c "Updated to version $opts[version]." $makefile || return
fi


## Perform the release

local starttime="`date`"

local label="$opts[component]_$opts[version]"

local description=""
if [[ -z $opts[re-release] ]]
then
  if [[ -z $opts[update-labels] ]]
  then
    echo
    echo "Enter one line description for release:"
    read description
    echo
    echo "Creating label..."
    create_label -t release -c \"$description\" \
                 $opts[component] $opts[version] \
      || return
  fi

  echo
  echo "Attaching label..."
  cleartool mklabel -replace $label $vob || return
  cleartool mklabel -replace -r $label $vob/$opts[component] || return
fi

echo
echo "Running abe..."
abe.pl -vob $vob -c $opts[component] -l $label -a $opts[arch] || return

local endtime="`date`"

echo "Finished"

if [[ -n $opts[mail] ]]
then
  {
    echo "Subject: RELEASE NOTE: $opts[component] version $opts[version]"
    echo
    echo "Component name: $opts[component]"
    echo "Version: $opts[version]"
    echo "Dependencies: ?"
    echo "Delta/Full release: Full"
    echo "CQs fixed/new functionality added: $description"
    echo "Initial target test env: ?"
  } | mail $=opts[mail]
fi
