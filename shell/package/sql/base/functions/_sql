#compdef sql
# ZSH function file
# Written by Martin Ebourne
# Part of the SQL base package
# Completion code for sql command
# Usage: These functions are used by the completion code
#
# $Id: _sql,v 1.9 2002/04/11 17:40:20 mebourne Exp $

_sql () {
  local -A tables
  local currentstate=0

  local word table state=900 index=1
  for word in $words
  do

    word=${${word#\(}%\)}
    case $word in
      delete)	state=111;;
      insert)	state=112;;
      update)	state=113;;
      into)	state=122;;
      table)	state=124;;
      view)	state=125;;
      order)	state=191;;
      group)	state=192;;
      select)	state=200;;
      where)	state=300;;
      having)	state=300;;
      by)	state=400;;
      set)	state=500;;
      from)	case $state in
		  111) state=121;;
		  *)   state=102;;
		esac;;
      ,)	(( state == 103 )) && state=102;;
      *)	local comma=0
		if [[ $word == *, ]]
		then
		  comma=1
		  word=${word%,}
		fi

		case $state in
		  102)	if (( comma ))
			then
			  tables[$word]=$word
			else
			  table=$word
			  state=103
			fi;;
		  103)	tables[$word]=$table
			table=""
			state=102;;
		  11?)	tables[$word]=$word
			(( state = state + 20 ));;
		  12?)	tables[$word]=$word
			(( state = state + 10 ));;
		  1*)	state=0;;
		esac
		;;
    esac

    if (( state != 103 && $#table ))
    then
      tables[$table]=$table;
      table=""
    fi

    (( index = index + 1 ))
    if (( index == CURRENT ))
    then
      currentstate=$state
    fi

  done

  if (( state == 103 && $#table ))
  then
    tables[$table]=$table;
    table=""
  fi


  #echo "tables=${(kv)tables}"
  #echo "state=$currentstate"

  local -a alternatives
  alts=()
  case $currentstate in
    900)	alts=($alts 'sql:SQL reserved words:(select delete insert update create drop)')
		alts=($alts 'tables:database tables:_sql_complete_proc_names');;
    102)	alts=($alts 'tables:database stored procedures:_sql_complete_table_names');;
    103)	;;
    111)	alts=($alts 'sql:SQL reserved words:(from)')
		alts=($alts 'tables:database tables:_sql_complete_table_names');;
    112)	alts=($alts 'sql:SQL reserved words:(into)')
		alts=($alts 'tables:database tables:_sql_complete_table_names');;
    113|12?)	alts=($alts 'tables:database tables:_sql_complete_table_names');;
    131)	alts=($alts 'sql:SQL reserved words:(where)');;
    132)	alts=($alts 'sql:SQL reserved words:(values)');;
    133)	alts=($alts 'sql:SQL reserved words:(set)');;
    191)	alts=($alts 'sql:SQL reserved words:(by)');;
    192)	alts=($alts 'sql:SQL reserved words:(by)');;
    2*|3*|4*|5*)
		local suffix=""
		if [[ $currentstate == 2* || $currentstate == 4* ]]
		then
		  # Temporary bodge to work around bugs in all-matches
		  # expansion when -r includes space
		  if [[ $curcontext == *:match:* ]]
		  then
		    suffix="-S ',' -r ',\t\n\-'"
		  else
		    suffix="-S ', ' -r ', \t\n\-'"
		  fi
		fi

		if [[ $PREFIX == *.* ]]
		then
		  local tablealias="${PREFIX%%.*}"
		  if (( $+tables[$tablealias] ))
		  then
		    local table="$tables[$tablealias]"
		    alts=($alts "columns-$table:database columns for $table:_sql_complete_column_names -p '$tablealias.' $suffix $table")
		  fi
		 else
		   alts=($alts "table-aliases:table aliases:compadd -S. ${(k)tables}")
		   if (( $#tables ))
		   then
		     local table=""
		     for table in $tables
		     do
		       alts=($alts "columns-$tables:database columns for $table:_sql_complete_column_names $suffix $table")
		     done
		   else
		     alts=($alts "all-columns:all database columns:_sql_complete_column_names $suffix -")
		   fi
	        fi
		;;
  esac

  _alternative $alts
}

_sql "$@"
