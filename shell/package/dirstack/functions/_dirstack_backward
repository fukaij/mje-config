# ZSH function file
# Part of the dirstack package
# ZLE widget to cycle backwards through the directory stack
# Can only be called from ZLE as a widgit
#

# Split the command line using proper shell parsing so that we can work with
# escaped spaces correctly
typeset -a fields
fields=(${(z)LBUFFER})

# Check whether we are between words
if [[ $LBUFFER == *[$IFS] && $LBUFFER != *$fields[-1] ]]
then
  # If so then insert top of stack
  LBUFFER=$LBUFFER$(print -D - ${(q)${(q)dirstack[1]}})
  _dirstack_original=""
else
  # Otherwise we are in a word, so get the start of it
  local dir="$fields[-1]"

  # Work around zsh adding space onto end of line which finished with '\'
  if [[ $LBUFFER != *[$IFS] && $dir == *[$IFS] ]]
  then
    dir=$dir[1,-2]
  fi

  # Expand ~ etc
  local expanded=""
  expanded=${(Q)~dir}

  # Get current index into stack
  integer index=$dirstack[(i)$expanded]

  # Replace word with new value
  LBUFFER=$LBUFFER[1,-($#dir+1)]
  if (( index > $#dirstack ))
  then
    # Didn't match in stack, so replace with top entry
    LBUFFER=$LBUFFER$(print -D - ${(q)${(q)dirstack[1]}})
    _dirstack_original=$dir
  elif (( index < $#dirstack ))
  then
    # Did match, so replace with next entry
    LBUFFER=$LBUFFER$(print -D - ${(q)${(q)dirstack[$index+1]}})
  else
    # End of stack, so restore original text
    LBUFFER=$LBUFFER$_dirstack_original
  fi
fi
