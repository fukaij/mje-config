# ZSH function file
# Part of the prompt package
# Hook for precmd function to handle prompt formatting and displaying
# Usage: _prompt_precmd
#

_prompt_precmd_trimpwd() {
# Generate the current directory, losing bits off the front until it fits
_prompt_pwd=$(print -D - $PWD)
while (( $#_prompt_pwd > 1 && $#_prompt_pwd > $#_prompt_justify ))
do
  _prompt_pwd=${_prompt_pwd#...}
  case $_prompt_pwd in
    /)		;;
    /*/*)	_prompt_pwd=".../${_prompt_pwd#/*/}";;
    [^/]*/*)	_prompt_pwd=".../${_prompt_pwd#*/}";;
    *)		_prompt_pwd=".";;
  esac
done
}

_prompt_precmd() {
# Null out old strings to get base size
_prompt_justify=""
_prompt_pwd=""

# Get padding required for base string
_prompt_justify=${(l:COLUMNS - ${#${(%%)${prompt_above//[%]\{[^%]#%\}/}}[(f)1]}:)}

_prompt_precmd_trimpwd

# Get the padding required including the current directory
_prompt_justify="${${_prompt_justify[$#_prompt_pwd,-1]}% }"

# Reset terminal if required
if [[ -n $prompt_reset ]]
then
  echo -ne - $prompt_reset
fi

# Display the prompt_eol and follow it up with spaces to just less than
# COLUMNS characters in total
print -nP - $prompt_eol
echo -n "${(l:COLUMNS - ${#${(%%)${prompt_eol//[%]\{[^%]#%\}/}}}:)}"

# Force newline
echotc cr

# Display the prompt
if [[ -n $prompt_above ]]
then
  print -nP - $prompt_above

  # May need a newline depending on terminal. Cache value to save on forks
  if (( _prompt_wrapmode ))
  then
    echo
  fi
fi
}

_prompt_precmd "$@"
