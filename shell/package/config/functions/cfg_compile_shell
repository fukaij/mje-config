#eval compdef -n _parse_opts cfg_compile_shell
# ZSH function file
# Written by Martin Ebourne
# Part of the Config package
# Compile shell directory
#

emulate -LR zsh
setopt extended_glob

local -A opts
parse_opts - opts -- "$argv[@]" <<'EOF' || return 1
Description:
Compile shell directory.

Usage:
cfg_compile_shell [options] <directory>

Options:
  -h, --help			Provide this help
				# --help | -h * excludes=*

Arguments:
  <directory>			The directory to compile
				# directory : directory
EOF

local base_dir="$opts[directory]"

# Compile all the individual shell files - ie. excluding all in functions directories
local file=""
for file in $base_dir/**/^(functions|RCS)/^(*.zwc|*~)(.N) $base_dir/^(*.zwc|*~)(.N)
do
  # Only compile files if not already compiled or source modified
  if [[ ! -e $file.zwc || $file -nt $file.zwc ]]
  then
    echo "Recompile file ${file#$base_dir/}"
    zcompile $file
  fi
done

# Compile all the functions directories such that they have one file each
local dir=""
local -a files
for dir in $base_dir/**/functions(/N)
do
  local zwcfile="$dir.zwc"

  # Get list of files to be compiled into this directory file. Skip anything
  # with a . in the name because that isn't expected to be a function file
  # (though it technically could be). Probably *.bak or .orig, .diff etc
  files=($dir/^*.*(.N))

  if (( $#files ))
  then
    integer compile=0

    # Determine if we need to recompile file
    # (i)  it doesn't exist yet
    # (ii) at least one of the function source files has been modified
    if [[ -e $zwcfile ]]
    then
      for file in $files
      do
        if [[ $file -nt $zwcfile ]]
	then
	  compile=1
	fi
      done
    else
      compile=1
    fi

    # If required then recompile it
    if (( compile ))
    then
      echo "Recompile directory ${dir#$base_dir/}"
      zcompile $dir $files
    fi
  else
    # If no files in directory, ensure there's no compiled file
    rm -f $zwcfile
  fi
done
