# ZSH function file
# Update config directory
# Usage: configupdate [shell|emacs]
#
# $Id: cfgupdate,v 1.5 2001/05/14 17:25:29 mebourne Exp $

local base_dir file_desc remove_pattern ignore_pattern

case $argv[1] in
  shell|) # This is the default
    base_dir=$ZCONFIGDIR
    file_desc="ZSH configuration system"
    remove_pattern='*~|\#*\#'
    ignore_pattern=''
    ;;

  emacs)
    base_dir=${ZCONFIGDIR:h}/emacs
    file_desc="Emacs configuration system"
    remove_pattern='*~|\#*\#'
    ignore_pattern='*.elc|loaddefs.el|startup.el'
    ;;

  *)
    echo "Syntax: configupdate [shell|emacs]" 1>&2
    return 1
    ;;
esac

echo "Updating directory $base_dir"
if [[ ! -d $base_dir ]]
then
  echo "Error: No such directory" 1>&2
  return 1
fi

local -a remove_files non_vc_files changed_files unchanged_files

# Iterate through the RCS controlled directories in config
local dir file leaf name
for dir in $base_dir/**/RCS(/)
do
  dir=${dir:h:h}

  # Check files currently here
  for file in $dir/*(.N)
  do
    leaf=${file:t}
    name=${file#$base_dir/}

    case $leaf in
      $~remove_pattern) # Temporary files to be removed (eg. backups)
        remove_files=($remove_files $file)
	;;

      $~ignore_pattern) # Files to be ignored
	;;

      *) # Other files. Catch them if no corresponding RCS file
        if [[ ! -f $dir/RCS/$leaf,v ]]
	then
	  echo "NEW      $name"
	  non_vc_files=($non_vc_files $file)
	fi
	;;
    esac
  done

  # Check RCS files
  for file in $dir/RCS/*,v(.N)
  do
    leaf=${${file:t}%,v}
    file=$dir/$leaf
    name=${file#$base_dir/}

    if [[ -w $file ]]
    then
      # Writable. Either edited or not (presumed locked if writable)
      if rcsdiff -q $file >/dev/null
      then
	echo "LOCKED   $name"
	unchanged_files=($unchanged_files $file)
      else
	echo "MODIFIED $name"
	changed_files=($changed_files $file)
      fi
    else
      # Not writable. Replace with latest from version history
      if rlog -rdeleted $file >/dev/null 2>&1
      then
        echo "Deleted  ${file#$base_dir/}"
	rm -f $file
      else
        echo "Updated  ${file#$base_dir/}"
    	co -u $file 2>/dev/null
      fi
    fi
  done
done


# List the various types of files and give optional actions for them

if [[ -n $remove_files ]]
then
  echo
  echo ">>> Delete these temporary/backup files?"
  print -c - ${remove_files#$base_dir/}
  if read -q
  then
    rm -f $remove_files
  fi
fi

if [[ -n $non_vc_files ]]
then
  echo
  echo ">>> These files are not version controlled. Add them?"
  print -c - ${non_vc_files#$base_dir/}
  if read -q
  then
    ci -u -t-"$file_desc" $non_vc_files
  fi
fi

if [[ -n $unchanged_files ]]
then
  echo
  echo ">>> These files are checked out but unchanged. Revert?"
  print -c - ${unchanged_files#$base_dir/}
  if read -q
  then
    ci -u $unchanged_files
  fi
fi

if [[ -n $changed_files ]]
then
  echo
  echo ">>> These files are checked out and edited. Check in?"
  print -c - ${changed_files#$base_dir/}
  if read -q
  then
    for file in $changed_files
    do
      rcsdiff -u $file
      ci -u $file
    done
  fi
fi
