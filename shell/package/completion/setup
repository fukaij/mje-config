# ZSH configuration file
# Executed when the completion package is included
# Setup for completion package
# Written by Martin Ebourne
#

add_functions_directory package/completion/functions


## Starting the completion system

# Give the dumpfile a different name if ZDOTDIR!=HOME
local dumpfile="${ZDOTDIR:-$HOME}/.zcompdump"
if [[ ${ZDOTDIR:-$HOME} != $HOME ]]
then
  dumpfile=$ZDOTDIR/.cache.completion
fi

# Load the completion module. -C speeds things up a lot by skipping audit &
# zcompdump file regeneration check. Check for zsh newer than dumpfile (ie.
# upgraded), otherwise need to rely on user to be sensible about these things
autoload -U compinit
if [[ $MODULE_PATH -nt $dumpfile ]]
then
  command rm -f $dumpfile
fi
compinit -C -d $dumpfile

# Set up so future added function directories are processed for completions,
# and ensure all previously added function dirs in the config system are
# re-processed
add_to_hook _add_functions_hook '_completion_add_functions "$argv[@]"'
_completion_add_directories ${(M)fpath:#$ZCONFIGDIR/*}


## These are global settings

# The default sequence to try for completion
zstyle ':completion:*' completer _oldlist _complete _ignored _match _approximate _prefix

# Make completion case insensitive
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

# Enable colours as for ls
if (( COLOUR ))
then
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
fi

# Reduce space used for completion listing
zstyle ':completion:*:default' list-packed true

# List each group of completions under separate headings (works with
# formatting below)
zstyle ':completion:*' group-name ''

# Return to last prompt after listing completions
zstyle ':completion:*:default' last-prompt true

# Use menu selection if entering menu completion
zstyle ':completion:*:default' menu select

# Description separator for listing options
zstyle ':completion:*' list-separator ':'


## These are modifications to specific completers

# Set expand to do variable substitutions but not file wildcards
zstyle ':completion:*:expand:*' glob false
zstyle ':completion:*:expand:*' substitute true

# Force expansion to insert the expected expansion rather than menu-complete
# on a load of other possibilities
zstyle ':completion:*:expand:*' tag-order all-expansions expansions original

# Prevent listing of original along with corrections
zstyle ':completion:*:approximate*:*' tag-order corrections original

# Allow one error for every four or part thereof characters typed in
# approximate completer
zstyle -e ':completion:*:approximate*:*' max-errors \
  'reply=( $(( ($#PREFIX+$#SUFFIX)/4 + 1 )) numeric )'

# In the case of using prefix to obtain a completion then add a space in to
# separate the real bit from the discarded stuff
zstyle ':completion:*:prefix:*' add-space true

# Only let match work on full patterns
zstyle ':completion:*:match:*' match-original only

# Remove duplicates from list (for history completion)
zstyle ':completion:*:history:*' remove-all-dups true

# Stop approximate and match from breaking in to unexpected menu completion
zstyle ':completion::approximate*:*' insert-unambiguous always
zstyle ':completion::match:*' insert-unambiguous pattern

# Stop _history_complete_word from listing the matches
zstyle ':completion:history-words:*' list false


## These are modifications to particular commands or contexts

# When completing for 'cd' try local directories before attempting to use
# cdpath/cdablevars/etc
zstyle ':completion:*:complete:cd:*' tag-order local-directories
# Same for commands. Doesn't work
zstyle ':completion:*:complete:-command-:*' tag-order '! path-directories'

# Try indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters


## These are modifications to particular result sets

# Ignore completion functions (until the _ignored completer)
zstyle ':completion:*:*:*:functions' ignored-patterns '_*'


## These give the description format strings. Need the colour package to do
## this

package -i colour
local temp=""

# Describe the group of completions
colour_setvar temp [black,bg_cyan] '%d:' [normal]
zstyle -e ':completion:*:*:*:descriptions' format reply=\"$temp\"

# Give info on errors when corrected
colour_setvar temp [black,bg_cyan] '%d (errors: %e):' [normal]
zstyle -e ':completion:*:*:*:corrections' format reply=\"$temp\"

# Notify if no matches
colour_setvar temp [black,bg_red] 'No matches for: %d' [normal]
zstyle -e ':completion:*:*:*:warnings' format reply=\"$temp\"

# Displaying miscellaneous messages
colour_setvar temp [black,bg_magenta] '%d' [normal]
zstyle -e ':completion:*:*:*:messages' format reply=\"$temp\"

# More-style prompt when scrolling completions
zstyle ':completion:*:default' list-prompt '%S<completions> line %l match %m (%p)%s'

# Auto-describe undocumented parameters
zstyle ':completion:*:default' auto-description 'specify: %d'


## Add an all-matches widget

# Create the widget as a generic completer to call _all_matches
zle -C all-matches complete-word _generic
zstyle ':completion:all-matches:*' completer _all_matches

# Only use current list of matches - don't generate new ones
zstyle ':completion:all-matches:*' old-matches only


## Add a widget to give the down arrow two functions - down or menu complete,
## as appropriate
zle -C completion-is-completing complete-word _completion_is_completing
zle -N completion-menu-or-down _completion_menu_or_down


## Extra key bindings

# Normal bindings
bindkey '^Xa' all-matches

# Before assigning completion-menu-or-down to down arrow need to find out what
# previous down arrow did
typeset -g _completion_down_widget="${$(bindkey '^[[B')[(w)2]}"
bindkey "^[[B" completion-menu-or-down

# Bindings for menu selection. Need to ensure module is loaded for the keymap
zmodload -i zsh/complist
bindkey -M menuselect '/' accept-and-infer-next-history
