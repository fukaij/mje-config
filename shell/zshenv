# ZSH configuration file
# This is the zshenv file sourced directly by zsh
# Written by Martin Ebourne
#

# Enable this (or call the shell with it already set) for progress reports during config
#ZCONFIGDEBUG=1

# Enable this (or call the shell with it already set) for profiling output
#ZCONFIGPROFILE=1

ZFILE=zshenv
[[ -n $ZCONFIGDEBUG ]] && echo "Executing config file $ZFILE"

## Function definitions. Can't make these autoload since the paths aren't set up yet

# This function takes a file/directory (possibly symbolic link) with FULL PATHNAME
# and returns the full pathname of the real file/directory (possibly following
# multiple symbolic links)
_expand_symlink() {
  local file="$argv[1]"

  # While we have a link
  while [[ -L $file ]]
  do
    local dir="${file:h}"

    # Find the file the link points to
    zmodload -i zsh/stat
    file=$(stat +link $file)

    # If it's a relative path then need to combine onto current directory value
    if [[ $file != /* ]]
    then
      # First however, process values to eliminate .. components of path
      while [[ $file == ../* ]]
      do
        dir=${dir:h}
	file=${file#../}
      done

      file=$dir/$file
    fi
  done

  # Return the new value
  echo - "$file"
}

# Function to make life easier. Executes a config file if present & readable
config_if_present() {
  local file="$argv[1]" realfile

  # Need to look in the right directory depending on whether user config or otherwise
  if [[ $file == user/* ]]
  then
    realfile=$ZUSERCONFIGDIR/${file#user/}
  else
    realfile=$ZCONFIGDIR/$file
  fi

  # Execute file if it exists
  if [[ -r $realfile ]]
  then
    [[ -n $ZCONFIGDEBUG ]] && echo "Loading config file $file"

    # Define each config file into a function and call that. This gives much more meaningful
    # output when profiled
    local fn=_config_${file//\//_}
    function $fn {
      . $realfile
    }
    $fn
    unfunction $fn
  fi
}


## Do the stuff

# Profiling. Enable it here. Report at end of zshrc
if [[ -n $ZCONFIGPROFILE ]]
then
  zmodload -i zsh/zprof
  zprof -c
fi

_init_zshenv() {
  # Zsh gives us absolutely no indication of which config file we are running, nor
  # where it is. So lets try and find the real zsh config directory
  ZCONFIGDIR=${$(_expand_symlink ${ZDOTDIR:-$HOME}/.$ZFILE):h}

  # The user directory defaults to $ZCONFIGDIR/user, but can be overridden with
  # a symbolic link called ~/.zsh_user which must point to the required directory
  # (note ~/.zsh_user can be a directory itself, which will be used in that case)
  ZUSERCONFIGDIR=$(_expand_symlink $HOME/.zsh_user)
  [[ ! -d $ZUSERCONFIGDIR ]] && ZUSERCONFIGDIR=$ZCONFIGDIR/user

  # Check we succeeded
  [[ -z $ZCONFIGDIR ]] && { echo "ERROR: ZCONFIGDIR unset in $ZFILE" ; exit 1 }

  # Debugging
  if [[ -n $ZCONFIGDEBUG ]]
  then
    echo "Using system configuration from $ZCONFIGDIR"
    echo "Using user configuration from $ZUSERCONFIGDIR"
  fi

  # Execute the real configuration files
  config_if_present system/global
  config_if_present local/current/global
  config_if_present user/global
}
_init_zshenv
unfunction _init_zshenv

[[ -n $ZCONFIGDEBUG ]] && echo "Finished config file $ZFILE"
unset ZFILE
